(()=>{"use strict";var __webpack_modules__={884:()=>{eval("\n;// CONCATENATED MODULE: ./src/utils/constants.js\n//Набор классов и селекторов шаблона карточки\r\nconst cardSelectorCollection = {\r\n  template: '#Card',\r\n  elementSelector: '.cards__card',\r\n  pictureSelector: '.cards__photo',\r\n  titleSelector: '.cards__title',\r\n  buttonRemoveSelector: '.cards__button-remove',\r\n  buttonRemoveVisibilityClass: 'cards__button-remove_hidden',\r\n  buttonLikeSelector: '.cards__button-like',\r\n  buttonLikeActiveClass: 'cards__button-like_active',\r\n  likeCountSelector: '.cards__like-count',\r\n};\r\n\r\n//Набор селекторов для работы с попапом картинки\r\nconst popupImageSelectorCollection = {\r\n  popupSelector: '.popup_type_image',\r\n  figureImgSelector: '.popup__image',\r\n  figureCaptionSelector: '.popup__caption',\r\n};\r\n\r\n//CSS класс открытого попапа\r\nconst popupIsOpenedClass = 'popup_opened';\r\n//Селектор инпутов форм\r\nconst inputSelector = '.popup__input';\r\n//Селектор кнопки закрыть на попапах\r\nconst closeButtonSelector = '.popup__button-close';\r\n//Селекторы кнопок на странице\r\nconst buttonEditSelector = '.profile__button-edit';\r\nconst buttonAddCardSelector = '.profile__button-add';\r\n//Селектор контейнера карточек\r\nconst cardContainerSelector = '.cards__list';\r\n\r\n//Набор селекторов и имен для работы с попапом редактирования аватара\r\nconst popupAvatarSelectorCollection = {\r\n  popupSelector: '.popup_type_avatar',\r\n  popupIsOpenedClass: popupIsOpenedClass,\r\n  closeButtonSelector: closeButtonSelector,\r\n  popupFormName: 'avatar-form',\r\n  inputSelector: inputSelector,\r\n  popupInputHeadingName: 'avatarUrlInput',\r\n  popupButtonSubmitSelector: '.popup__button-submit',\r\n};\r\n\r\n//Набор селекторов и имен для работы с попапом редактирования профайла\r\nconst popupProfileSelectorCollection = {\r\n  popupSelector: '.popup_type_edit',\r\n  popupIsOpenedClass: popupIsOpenedClass,\r\n  closeButtonSelector: closeButtonSelector,\r\n  popupFormName: 'profile-form',\r\n  inputSelector: inputSelector,\r\n  popupInputHeadingName: 'profileNameInput',\r\n  popupInputOptionName: 'ocupationInput',\r\n  popupButtonSubmitSelector: '.popup__button-submit',\r\n};\r\n\r\n//Набор селекторов текстов профайла\r\nconst profileSelectorCollection = {\r\n  /* profileAvatar: '.profile__avatar', */\r\n  profileAvatar: '.profile__button-avatar',\r\n  profileNameSelector: '.profile__name',\r\n  profileOcupationSelector: '.profile__ocupation',\r\n};\r\n\r\n//Набор селекторов и имен для работы с попапом добавления карточки\r\nconst popupAddCardSelectorCollection = {\r\n  popupSelector: '.popup_type_add',\r\n  popupIsOpenedClass: popupIsOpenedClass,\r\n  closeButtonSelector: closeButtonSelector,\r\n  popupFormName: 'cardAdd-form',\r\n  inputSelector: inputSelector,\r\n  popupInputHeadingName: 'cardNameInput',\r\n  popupInputOptionName: 'cardUrlInput',\r\n  popupButtonSubmitSelector: '.popup__button-submit',\r\n};\r\n\r\n//Набор селекторов и имен для работы с попапом подтверждения\r\nconst popupConfirmSelectorCollection = {\r\n  popupSelector: '.popup_type_confirm',\r\n  popupIsOpenedClass: popupIsOpenedClass,\r\n  closeButtonSelector: closeButtonSelector,\r\n  popupFormName: 'confirm-form',\r\n  popupButtonSubmitSelector: '.popup__button-submit',\r\n};\r\n\r\n//Набор селекторов и классов для валидации форм\r\nconst formSelectorCollection = {\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button-submit',\r\n  inactiveButtonClass: 'popup__button-submit_inactive',\r\n  inputErrorClass: 'popup__input_invalid',\r\n  errorClass: 'popup__input-error_active',\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/UserInfo.js\nclass UserInfo {\r\n  constructor({\r\n    profileAvatar,\r\n    profileNameSelector,\r\n    profileOcupationSelector,\r\n  }) {\r\n    this._profileAvatarElement = document.querySelector(profileAvatar);\r\n    this._profileNameElement = document.querySelector(profileNameSelector);\r\n    this._profileOcupationElement = document.querySelector(\r\n      profileOcupationSelector\r\n    );\r\n  }\r\n\r\n  //Получить данные пользователя в объект\r\n  getUserInfo = () => {\r\n    return {\r\n      profileNameInput: this._name,\r\n      ocupationInput: this._about,\r\n    };\r\n  };\r\n\r\n  getUserId = () => this._id;\r\n\r\n  //Получить данные из объекта и отобразить\r\n  setUserInfo = ({ name, about }) => {\r\n    this._name = name;\r\n    this._about = about;\r\n    this._renderUserInfo();\r\n  };\r\n\r\n  //Отобразить данные пользователя на экране\r\n  _renderUserInfo = () => {\r\n    this._profileNameElement.textContent = this._name;\r\n    this._profileOcupationElement.textContent = this._about;\r\n  };\r\n\r\n  setAvatar = (url) => {\r\n    this._profileAvatarElement.style.backgroundImage = `url(${url})`;\r\n  };\r\n\r\n  getAvatarElement = () => this._profileAvatarElement;\r\n\r\n  //Получить данные пользователя в экземпляр и отобразить\r\n  //Выполняется только при загрузке страницы\r\n  setUser = ({ name, about, _id, avatar }) => {\r\n    this.setUserInfo({ name, about });\r\n    this._id = _id;\r\n    this.setAvatar(avatar);\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/FormValidator.js\nclass FormValidator {\r\n  constructor(\r\n    {\r\n      inputSelector,\r\n      submitButtonSelector,\r\n      inactiveButtonClass,\r\n      inputErrorClass,\r\n      errorClass,\r\n    },\r\n    formElement\r\n  ) {\r\n    this._inputSelector = inputSelector;\r\n    this._submitButtonSelector = submitButtonSelector;\r\n    this._inactiveButtonClass = inactiveButtonClass;\r\n    this._inputErrorClass = inputErrorClass;\r\n    this._errorClass = errorClass;\r\n\r\n    this._formElement = formElement;\r\n\r\n    this._inputsList = this._formElement.querySelectorAll(this._inputSelector);\r\n\r\n    this._submitButton = this._formElement.querySelector(\r\n      this._submitButtonSelector\r\n    );\r\n  }\r\n\r\n  //Показать строку с ошибкой\r\n  _showErrorMsg(inputElement) {\r\n    //получить спан для отображения ошибки\r\n    const inputError = this._formElement.querySelector(\r\n      `.${inputElement.name}-error`\r\n    );\r\n    //получить текст ошибку\r\n    inputError.textContent = inputElement.validationMessage;\r\n    //добавить класс для отображения ошибки\r\n    inputError.classList.add(this._errorClass);\r\n    //добавить класс для инпута\r\n    inputElement.classList.add(this._inputErrorClass);\r\n  }\r\n\r\n  //Скрыть строку с ошибкой\r\n  _hideErrorMsg(inputElement) {\r\n    //получить спан для отображения ошибки\r\n    const inputError = this._formElement.querySelector(\r\n      `.${inputElement.name}-error`\r\n    );\r\n    inputError.textContent = '';\r\n    //убрать класс для отображения\r\n    inputError.classList.remove(this._errorClass);\r\n    //убрать класс для инпута\r\n    inputElement.classList.remove(this._inputErrorClass);\r\n  }\r\n\r\n  //Ф-я блокировки кнопки submit\r\n  _disableSubmitButton() {\r\n    this._submitButton.disabled = true;\r\n    //добавить класс неактивной кнопки\r\n    this._submitButton.classList.add(this._inactiveButtonClass);\r\n  }\r\n\r\n  //Ф-я разблокировки кнопки submit\r\n  _enableSubmitButton() {\r\n    this._submitButton.disabled = false;\r\n    //добавить класс неактивной кнопки\r\n    this._submitButton.classList.remove(this._inactiveButtonClass);\r\n  }\r\n\r\n  //Ф-я проверки валидности формы\r\n  toggleSubmitButtonVisability() {\r\n    if (!this._formElement.checkValidity()) {\r\n      //блокировать кнопку Submit\r\n      this._disableSubmitButton();\r\n    } else {\r\n      //разблокировать кнопку Submit\r\n      this._enableSubmitButton();\r\n    }\r\n  }\r\n\r\n  //Ф-я проверки валидности ввода\r\n  _checkValidationInput(inputElement) {\r\n    //если инпут невалиден показать спан\r\n    if (!inputElement.validity.valid) {\r\n      this._showErrorMsg(inputElement);\r\n    } else {\r\n      //скрыть спан\r\n      this._hideErrorMsg(inputElement);\r\n    }\r\n  }\r\n\r\n  //Ф-я добавления обработчика событий ввода на все инпуты для их валидации\r\n  _setListener(inputElement) {\r\n    inputElement.addEventListener('input', () => {\r\n      this._checkValidationInput(inputElement);\r\n      this.toggleSubmitButtonVisability();\r\n    });\r\n  }\r\n\r\n  //Ф-я перебора всех инпутов и скрытия их ошибок\r\n  hideInputErors() {\r\n    this._inputsList.forEach((inputElement) => {\r\n      this._hideErrorMsg(inputElement);\r\n    });\r\n  }\r\n\r\n  enableValidation() {\r\n    //Добавить обработчики событий\r\n    this._inputsList.forEach((inputElement) => {\r\n      this._setListener(inputElement);\r\n    });\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/Section.js\nclass Section {\r\n  constructor(renderer, containerSelector) {\r\n    this._renderer = renderer;\r\n    this._containerElement = document.querySelector(containerSelector);\r\n  }\r\n\r\n  //Ф-я добавления карточки в контейнер\r\n  addItem = (element, isFromList) => {\r\n    if (isFromList) {\r\n      this._containerElement.append(element);\r\n    } else {\r\n      this._containerElement.prepend(element);\r\n    }\r\n  };\r\n\r\n  //Ф-я отрисовки карточек из саписка\r\n  renderItems = (items) => {\r\n    this._items = items;\r\n    this._items.forEach(this._renderer, true);\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/Card.js\nclass Card {\r\n  constructor(\r\n    cardObj,\r\n    handleCardClick,\r\n    isOwner,\r\n    openConfirmPopup,\r\n    hasLike,\r\n    like,\r\n    dislike,\r\n\r\n    {\r\n      template,\r\n      elementSelector,\r\n      pictureSelector,\r\n      titleSelector,\r\n      buttonRemoveSelector,\r\n      buttonRemoveVisibilityClass,\r\n      buttonLikeSelector,\r\n      buttonLikeActiveClass,\r\n      likeCountSelector,\r\n    }\r\n  ) {\r\n    //селекторы карточки\r\n    this._template = template;\r\n    this._elementSelector = elementSelector;\r\n    this._pictureSelector = pictureSelector;\r\n    this._titleSelector = titleSelector;\r\n    this._buttonRemoveSelector = buttonRemoveSelector;\r\n    this._buttonRemoveVisibilityClass = buttonRemoveVisibilityClass;\r\n    this._buttonLikeSelector = buttonLikeSelector;\r\n    this._likeCountSelector = likeCountSelector;\r\n    //классы для интерактивности карточки\r\n    this._buttonLikeActiveClass = buttonLikeActiveClass;\r\n    //объект со свойствами карточки\r\n    this._cardObj = cardObj;\r\n    //ф-я открытия окна карточки\r\n    this._handleCardClick = handleCardClick;\r\n    //Ф-я проверки является ли текущий пльзователь владельцем карточки\r\n    this._isOwner = isOwner;\r\n    //Ф-я проверки лайка от текущего пользователя\r\n    this._hasLike = hasLike;\r\n    //Ф-я открытия попапа подтверждения удаления карточки\r\n    this._openConfirmPopup = openConfirmPopup;\r\n    //ф-я установки записи лайка на сервер\r\n    this._like = like.bind(this);\r\n    //ф-я удаления лайка с сервера\r\n    this._disLike = dislike.bind(this);\r\n    //Получить содержимое шаблона карточки\r\n    this._cardTemplate = document.querySelector(this._template);\r\n  }\r\n\r\n  //Ф-я снятия установки лайка\r\n  _toggleLike = () => {\r\n    const self = this;\r\n    if (!this._hasLike(this._likeList)) {\r\n      this._like(this._getCardId(), self);\r\n    } else {\r\n      this._disLike(this._getCardId(), self);\r\n    }\r\n  };\r\n\r\n  //Отобразить количество лайков\r\n  _setLikesNumber = () => {\r\n    this._likeCountElement.textContent = this._likeList.length;\r\n  };\r\n\r\n  //Ф-я отображения лкйка\r\n  updateLikes = (cardObj) => {\r\n    //поулчить массив лайков\r\n    this._likeList = cardObj.likes;\r\n    //отображить лайк\r\n    if (this._hasLike(this._likeList)) {\r\n      this._cardButtonLikeElement.classList.add(this._buttonLikeActiveClass);\r\n    } else {\r\n      this._cardButtonLikeElement.classList.remove(this._buttonLikeActiveClass);\r\n    }\r\n    //Отобразить количество лайков\r\n    this._setLikesNumber();\r\n  };\r\n\r\n  //Ф-я удаления карточки через открытие попапа подтверждения\r\n  _removeCard = () => {\r\n    this._openConfirmPopup(this._getCardId(), this._cardElement);\r\n  };\r\n\r\n  //Ф-я установки листнеров карточки\r\n  _setListeners() {\r\n    //Добавить обработчик событий на кнопку удаления\r\n    this._cardButtonRemoveElement.addEventListener('click', this._removeCard);\r\n    //Добавить обработчик событий на кнопку лайка\r\n    this._cardButtonLikeElement.addEventListener('click', this._toggleLike);\r\n    //Добавить обработчик событий на изображение\r\n    this._cardPicture.addEventListener('click', () => {\r\n      this._handleCardClick(this._cardObj);\r\n    });\r\n  }\r\n\r\n  _getCardElement() {\r\n    //Получить содержимое шаблона карточки\r\n    const cardTemplateContent = this._cardTemplate.content;\r\n    //Получить элемент катрочки из шаблона\r\n    const cardElement = cardTemplateContent\r\n      .querySelector(this._elementSelector)\r\n      .cloneNode(true);\r\n\r\n    return cardElement;\r\n  }\r\n\r\n  //получить id карточки\r\n  _getCardId = () => this._cardObj._id;\r\n\r\n  //Cкрыть кнопку удаления чужой карточки\r\n  _toggleButtonDeleteVisibility = () => {\r\n    if (!this._isOwner(this._cardObj)) {\r\n      this._cardButtonRemoveElement.classList.add(\r\n        this._buttonRemoveVisibilityClass\r\n      );\r\n    }\r\n  };\r\n\r\n  getCard() {\r\n    //получить карточку\r\n    this._cardElement = this._getCardElement();\r\n\r\n    //Наполнить элемент изображения\r\n    this._cardPicture = this._cardElement.querySelector(this._pictureSelector);\r\n\r\n    //Получить элемент кнопки удаления\r\n    this._cardButtonRemoveElement = this._cardElement.querySelector(\r\n      this._buttonRemoveSelector\r\n    );\r\n\r\n    //Получить элемент кнопки лайка\r\n    this._cardButtonLikeElement = this._cardElement.querySelector(\r\n      this._buttonLikeSelector\r\n    );\r\n\r\n    //Получить элемент счетчика лайков\r\n    this._likeCountElement = this._cardElement.querySelector(\r\n      this._likeCountSelector\r\n    );\r\n\r\n    this._cardPicture.src = this._cardObj.link;\r\n    this._cardPicture.alt = this._cardObj.name;\r\n    this._cardElement.querySelector(this._titleSelector).textContent =\r\n      this._cardObj.name;\r\n    //установить слушателей событий карточки\r\n    this._setListeners();\r\n    //Установить видимость  кнопки удаления карточки\r\n    this._toggleButtonDeleteVisibility();\r\n\r\n    //установить лайки\r\n    this.updateLikes(this._cardObj);\r\n\r\n    return this._cardElement;\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/Popup.js\nclass Popup {\r\n  constructor(popupSelector, popupIsOpenedClass, closeButtonSelector) {\r\n    this._popupElement = document.querySelector(popupSelector);\r\n    this._closeButtonElement =\r\n      this._popupElement.querySelector(closeButtonSelector);\r\n\r\n    this._popupIsOpenedClass = popupIsOpenedClass;\r\n  }\r\n\r\n  //ф-я открытия попапа\r\n  open() {\r\n    this._popupElement.classList.add(this._popupIsOpenedClass);\r\n    window.addEventListener('keydown', this._handleEscClose);\r\n  }\r\n\r\n  //ф-я закрытия попапа\r\n  close() {\r\n    this._popupElement.classList.remove(this._popupIsOpenedClass);\r\n    window.removeEventListener('keydown', this._handleEscClose);\r\n  }\r\n\r\n  //ф-я обработки нажатия клавиши ESC\r\n  _handleEscClose = (evt) => {\r\n    if (evt.key === 'Escape') {\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  //Ф-я установки листнеров\r\n  setEventListeners() {\r\n    this._popupElement.addEventListener('click', (evt) => {\r\n      if (evt.target === this._popupElement) {\r\n        this.close();\r\n      }\r\n    });\r\n    this._closeButtonElement.addEventListener('click', () => {\r\n      this.close();\r\n    });\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/PopupWithImage.js\n\r\n\r\nclass PopupWithImage extends Popup {\r\n  constructor(\r\n    { popupSelector, figureImgSelector, figureCaptionSelector },\r\n    popupIsOpenedClass,\r\n    closeButtonSelector\r\n  ) {\r\n    super(popupSelector, popupIsOpenedClass, closeButtonSelector);\r\n    this._figureImgElement =\r\n      this._popupElement.querySelector(figureImgSelector);\r\n    this._figureCaptionElement = this._popupElement.querySelector(\r\n      figureCaptionSelector\r\n    );\r\n  }\r\n\r\n  //переопределенная ф-я открытия попапа\r\n  open = ({ link, name }) => {\r\n    this._figureImgElement.src = link;\r\n    this._figureImgElement.alt = name;\r\n    this._figureCaptionElement.textContent = name;\r\n    super.open();\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/PopupWithForm.js\n\r\n\r\nclass PopupWithForm extends Popup {\r\n  constructor(\r\n    {\r\n      popupSelector,\r\n      popupFormName,\r\n      popupInputHeadingName,\r\n      popupInputOptionName,\r\n      inputSelector,\r\n      popupIsOpenedClass,\r\n      closeButtonSelector,\r\n      popupButtonSubmitSelector,\r\n    },\r\n    handleFormSubmit\r\n  ) {\r\n    super(popupSelector, popupIsOpenedClass, closeButtonSelector);\r\n\r\n    //получить форму\r\n    this._popupFormElement = document.forms[popupFormName];\r\n\r\n    //получить элементы формы\r\n    this._popupInputHeadingElement =\r\n      this._popupFormElement.elements[popupInputHeadingName];\r\n    this._popupInputOptionElement =\r\n      this._popupFormElement.elements[popupInputOptionName];\r\n\r\n    //получить все инпуты\r\n    this._inputList = this._popupFormElement.querySelectorAll(inputSelector);\r\n\r\n    //функция обработки сабмита формы\r\n    this._handleFormSubmit = handleFormSubmit;\r\n\r\n    //Получить элемент кнопки сабмита\r\n    this._buttonSubmitElement = this._popupFormElement.querySelector(\r\n      popupButtonSubmitSelector\r\n    );\r\n\r\n    //Для унификации попапов сохраняем текст кнопки сабмита\r\n    this._buttonSubmitText = this._buttonSubmitElement.textContent;\r\n  }\r\n\r\n  //Наполнить контентом элементы формы\r\n  setInputValues = (inputValues) => {\r\n    this._inputList.forEach((input) => {\r\n      input.value = inputValues[input.name];\r\n    });\r\n  };\r\n\r\n  //Получить тексты полей в объект\r\n  _getInputValues = () => {\r\n    const inputValues = {};\r\n    this._inputList.forEach((input) => {\r\n      inputValues[input.name] = input.value;\r\n    });\r\n    return inputValues;\r\n  };\r\n\r\n  //переопределенная функция закрытия\r\n  close = () => {\r\n    //сброс полей формы\r\n    this._popupFormElement.reset();\r\n    super.close();\r\n  };\r\n\r\n  //Ф-я переключения текста кнопки при загрузке данных\r\n  toggleSubmitButtonText = () => {\r\n    if (this._buttonSubmitText != this._buttonSubmitElement.textContent) {\r\n      this._buttonSubmitElement.textContent = this._buttonSubmitText;\r\n    } else {\r\n      this._buttonSubmitElement.textContent = 'Сохранение...';\r\n    }\r\n  };\r\n\r\n  //Переопределенная ф-я установки листнеров\r\n  setEventListeners() {\r\n    this._popupElement.addEventListener('submit', (evt) => {\r\n      evt.preventDefault();\r\n      this._handleFormSubmit(this._getInputValues());\r\n    });\r\n    super.setEventListeners();\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/ConfirmPopup.js\n\r\n\r\nclass ConfirmPopup extends Popup {\r\n  constructor(\r\n    { popupSelector, popupFormName, popupIsOpenedClass, closeButtonSelector },\r\n    handleFormSubmit\r\n  ) {\r\n    super(popupSelector, popupIsOpenedClass, closeButtonSelector);\r\n\r\n    //получить форму\r\n    this._popupFormElement = document.forms[popupFormName];\r\n\r\n    //функция обработки сабмита формы\r\n    this._handleFormSubmit = handleFormSubmit.bind(this);\r\n  }\r\n\r\n  open = (cardId, cardElement) => {\r\n    this._cardId = cardId;\r\n    this._cardElement = cardElement;\r\n    super.open();\r\n  };\r\n\r\n  //Переопределенная ф-я установки листнеров\r\n  setEventListeners() {\r\n    this._popupElement.addEventListener('submit', (evt) => {\r\n      evt.preventDefault();\r\n      this._handleFormSubmit(this._cardId, this._cardElement);\r\n      this.close();\r\n    });\r\n    super.setEventListeners();\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/Api.js\nclass Api {\r\n  constructor({ baseUrl, headers }) {\r\n    this._baseUrl = baseUrl;\r\n    this._headers = headers;\r\n  }\r\n\r\n  getInitialCards = () => {\r\n    return fetch(`${this._baseUrl}/cards`, { headers: this._headers }).then(\r\n      (res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      }\r\n    );\r\n  };\r\n\r\n  getUserInfo = () => {\r\n    return fetch(`${this._baseUrl}/users/me`, { headers: this._headers }).then(\r\n      (res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      }\r\n    );\r\n  };\r\n\r\n  modifyUserInfo = (userObject) => {\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify(userObject),\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n  };\r\n\r\n  sendNewCard = (userObject) => {\r\n    return fetch(`${this._baseUrl}/cards`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify(userObject),\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n  };\r\n\r\n  deleteCard = (cardId) => {\r\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: this._headers,\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n  };\r\n\r\n  sendLike = (cardId) => {\r\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes `, {\r\n      method: 'PUT',\r\n      headers: this._headers,\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n  };\r\n\r\n  deleteLike = (cardId) => {\r\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes `, {\r\n      method: 'DELETE',\r\n      headers: this._headers,\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n  };\r\n\r\n  modifyAvatar = (avatarObj) => {\r\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify(avatarObj),\r\n    }).then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Ошибка: ${res.status}`);\r\n    });\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/pages/index.js\n//Подключить css\r\n\r\n\r\n//Подключить константы\r\n\r\n\r\n//Подключить класс профайла\r\n\r\n\r\n//Подключить класс валидации формы\r\n\r\n\r\n//Подключить класс секции для добавления карточек\r\n\r\n\r\n//Подключить класс карточки\r\n\r\n\r\n//Подключить класс попапа картинки\r\n\r\n\r\n//Подключить класс попапа профайла\r\n\r\n\r\n//Подключить класс попапа профайла\r\n\r\n\r\n//Подключить класс Api\r\n\r\n\r\n//Получить элементы кнопок\r\nconst buttonEditElement = document.querySelector(buttonEditSelector);\r\nconst buttonAddCardElement = document.querySelector(buttonAddCardSelector);\r\n\r\n//Получить форму попапа добавления карточки\r\nconst popupAddCardFormElement =\r\n  document.forms[popupAddCardSelectorCollection.popupFormName];\r\n\r\n//Получить форму попапа редактирования профиля\r\nconst popupProfileFormElement =\r\n  document.forms[popupProfileSelectorCollection.popupFormName];\r\n\r\n//Получить форму попапа редактирования аватара\r\nconst popupAvatarFormElement =\r\n  document.forms[popupAvatarSelectorCollection.popupFormName];\r\n\r\n//Получить экземпляр класса профайла\r\nconst profileInfo = new UserInfo(profileSelectorCollection);\r\n\r\n//Получить экземпляр валидации для формы добавления карточки\r\nconst popupAddCardFormValidator = new FormValidator(\r\n  formSelectorCollection,\r\n  popupAddCardFormElement\r\n);\r\n\r\n//Получить экземпляр валидации для формы profile\r\nconst popupProfileFormValidator = new FormValidator(\r\n  formSelectorCollection,\r\n  popupProfileFormElement\r\n);\r\n\r\n//Получить экземпляр валидации для формы profile\r\nconst popupAvatarFormValidator = new FormValidator(\r\n  formSelectorCollection,\r\n  popupAvatarFormElement\r\n);\r\n\r\n//Получить экзепляр класса попапа картинки\r\nconst popupImage = new PopupWithImage(\r\n  popupImageSelectorCollection,\r\n  popupIsOpenedClass,\r\n  closeButtonSelector\r\n);\r\n\r\n//Добавить слушателей попапа картинки\r\npopupImage.setEventListeners();\r\n\r\n//Экземпляр класса попапа confirm\r\nconst popupConfirm = new ConfirmPopup(\r\n  popupConfirmSelectorCollection,\r\n  handleConfirmFormSubmit\r\n);\r\n\r\n//Устанавить слушателей попапа confirm\r\npopupConfirm.setEventListeners();\r\n\r\n//Создать экземпляр класса Api\r\nconst api = new Api({\r\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-65',\r\n  headers: {\r\n    authorization: '5dc10575-faf8-4cb0-bf95-93ad59b5cd72',\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n//Создать экземпляр секции-контейнера для карточек\r\nconst cardList = new Section(renderCard, cardContainerSelector);\r\n\r\n//Ф-я создания экземпляра карточки\r\nfunction renderCard(cardObj, isFromList) {\r\n  const newCard = new Card(\r\n    cardObj,\r\n    //Ф-я открытия попапа\r\n    (cardData) => {\r\n      popupImage.open(cardData);\r\n    },\r\n    //Проверка является ли текущий пользователем владельцем карточки\r\n    ({ owner }) => {\r\n      return profileInfo.getUserId() === owner._id;\r\n    },\r\n    //открытие попапа подтверждения удаления карточки\r\n    (id, cardElement) => {\r\n      popupConfirm.open(id, cardElement);\r\n    },\r\n    //Проверка наличия лайка от текущего пользователя\r\n    (likes) => {\r\n      return likes.find((owner) => {\r\n        if (owner._id == profileInfo.getUserId()) {\r\n          return true;\r\n        }\r\n      });\r\n    },\r\n    //Ф-я установки лайка с отправкой на сервер\r\n    (id, card) => {\r\n      api.sendLike(id).then((res) => {\r\n        card.updateLikes(res);\r\n      });\r\n    },\r\n    //Ф-я удаления лайка с отправкой на сервер\r\n    (id, card) => {\r\n      api.deleteLike(id).then((res) => {\r\n        card.updateLikes(res);\r\n      });\r\n    },\r\n    cardSelectorCollection\r\n  );\r\n  const cardElement = newCard.getCard();\r\n  cardList.addItem(cardElement, isFromList);\r\n}\r\n\r\n//Получить пользователя и отобразить его данные\r\n//Поуличить карточки и отрисовать после получения пользователя\r\nPromise.all([api.getUserInfo(), api.getInitialCards()])\r\n  .then((values) => {\r\n    profileInfo.setUser(values[0]);\r\n    return Promise.resolve(values[1]);\r\n  })\r\n  .then((initialCards) => {\r\n    //Добавить на страницу карточки из перечня по-умолчанию\r\n    cardList.renderItems(initialCards);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\n//Экземпляр класса попапа с формаой для профайла\r\nconst popupProfile = new PopupWithForm(\r\n  popupProfileSelectorCollection,\r\n  handleProfileFormSubmit\r\n);\r\n\r\n//Устанавить слушателей попапа профайла\r\npopupProfile.setEventListeners();\r\n\r\n//Экземпляр класса попапа с формаой для аватара\r\nconst popupAvatar = new PopupWithForm(\r\n  popupAvatarSelectorCollection,\r\n  handleAvatarFormSubmit\r\n);\r\n\r\n//Устанавить слушателей попапа добавления карточек\r\npopupAvatar.setEventListeners();\r\n\r\n//Ф-я проверки валидации формы редактирования аватара\r\nfunction checkValidationAvatarFormBeforOpen() {\r\n  //проверить валидность формы для отображения кнопки\r\n  popupAvatarFormValidator.toggleSubmitButtonVisability();\r\n  //скрыть сообщения о невалидности\r\n  popupAvatarFormValidator.hideInputErors();\r\n}\r\n\r\n//Ф-я проверки валидации формы профайла при ее открытии\r\nfunction checkValidationProfileFormBeforOpen() {\r\n  //проверить валидность формы для отображения кнопки\r\n  popupProfileFormValidator.toggleSubmitButtonVisability();\r\n  //скрыть сообщения о невалидности\r\n  popupProfileFormValidator.hideInputErors();\r\n}\r\n\r\n//Экземпляр класса попапа с формаой для добавления карточек\r\nconst popupAddCard = new PopupWithForm(\r\n  popupAddCardSelectorCollection,\r\n  handleAddCardFormSubmit\r\n);\r\n\r\n//Устанавить слушателей попапа добавления карточек\r\npopupAddCard.setEventListeners();\r\n\r\n//Ф-я проверки валидации формы добавления карточки при ее открытии\r\nfunction checkValidationAddCardFormBeforOpen() {\r\n  //проверить валидность формы для отображения кнопки\r\n  popupAddCardFormValidator.toggleSubmitButtonVisability();\r\n  //скрыть сообщения о невалидности\r\n  popupAddCardFormValidator.hideInputErors();\r\n}\r\n\r\n//Ф-я обработки сабмита формы профайла\r\nfunction handleProfileFormSubmit(inputValues) {\r\n  //изменить текст кнопки на загрузка...\r\n  this.toggleSubmitButtonText();\r\n  const userInfoObject = {\r\n    name: inputValues.profileNameInput,\r\n    about: inputValues.ocupationInput,\r\n  };\r\n  //Записать значения в сервер\r\n  api\r\n    .modifyUserInfo(userInfoObject)\r\n    .then((response) => {\r\n      //добавить на экран значения\r\n      profileInfo.setUserInfo(response);\r\n      //изменить текст кнопки обратно\r\n      this.toggleSubmitButtonText();\r\n      this.close();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n}\r\n\r\n//Ф-я обработки сабмита формы профайла\r\nfunction handleAvatarFormSubmit(inputValues) {\r\n  //изменить текст кнопки на загрузка...\r\n  this.toggleSubmitButtonText();\r\n  const avatarObject = {\r\n    avatar: inputValues.avatarUrlInput,\r\n  };\r\n  //Записать значения в сервер\r\n  api\r\n    .modifyAvatar(avatarObject)\r\n    .then(({ avatar }) => {\r\n      //добавить на экран значения\r\n      profileInfo.setAvatar(avatar);\r\n      //изменить текст кнопки обратно\r\n      this.toggleSubmitButtonText();\r\n      this.close();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n}\r\n\r\n//Ф-я обработки сабмита формы добавления карточки\r\nfunction handleAddCardFormSubmit({ cardNameInput, cardUrlInput }) {\r\n  //изменить текст кнопки на загрузка...\r\n  this.toggleSubmitButtonText();\r\n  const cardObj = {\r\n    name: cardNameInput,\r\n    link: cardUrlInput,\r\n  };\r\n  //Добавить новую карточку на сервер\r\n  api\r\n    .sendNewCard(cardObj)\r\n    .then((response) => {\r\n      //Добавить новую карточку в список\r\n      renderCard(response, false);\r\n      //изменить текст кнопки обратно\r\n      this.toggleSubmitButtonText();\r\n      this.close();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n}\r\n\r\n//Ф-я обработки сабмита формы confirm\r\nfunction handleConfirmFormSubmit(id, cardElement) {\r\n  //Ф-я удаления карточки со страницы и сервера\r\n  api\r\n    .deleteCard(id)\r\n    .then(({ message }) => {\r\n      if (message === 'Пост удалён') {\r\n        cardElement.remove();\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n}\r\n\r\n//включить валидацию формы добавления карточки\r\npopupAddCardFormValidator.enableValidation();\r\n\r\n//включить валидацию формы\r\npopupProfileFormValidator.enableValidation();\r\n\r\n//включить валидацию формы\r\npopupAvatarFormValidator.enableValidation();\r\n\r\n//Добавить событие нажатия кнопки редактировать\r\nbuttonEditElement.addEventListener('click', () => {\r\n  popupProfile.setInputValues(profileInfo.getUserInfo());\r\n  checkValidationProfileFormBeforOpen();\r\n  popupProfile.open();\r\n});\r\n\r\n//Добавить событие нажатия кнопки добавить карточку\r\nbuttonAddCardElement.addEventListener('click', () => {\r\n  checkValidationAddCardFormBeforOpen();\r\n  popupAddCard.open();\r\n});\r\n\r\n//Добавить событие нажатия кнопки изменить аватар\r\nprofileInfo.getAvatarElement().addEventListener('click', () => {\r\n  checkValidationAvatarFormBeforOpen();\r\n  popupAvatar.open();\r\n});\r\n\n\n//# sourceURL=webpack://mesto/./src/pages/index.js_+_10_modules?")}},__webpack_exports__={};__webpack_modules__[884]()})();